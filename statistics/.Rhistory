preprocess_WM <- function(path){
cleaned <- .clean_data(read.csv(path))
SimpleSpan <- .clean_SimpleSpan(cleaned)
ComplexSpan <- .clean_ComplexSpan(cleaned)
SimpleSpan[names(ComplexSpan)[!names(ComplexSpan) %in% names(SimpleSpan)]] <- NA
out <- rbind(SimpleSpan, ComplexSpan)
out <- dplyr::arrange(out, desc(Task), Trial, Correct)
row.names(out) <- NULL
out[c("Participant", "Task", "Set_Size", "Trial", "Stimulus", "Response", "Correct", "Distractor", "Distractor_Correct", "Distractor_RT")]
}
# Utility functions -------------------------------------------------------
.clean_data <- function(data){
data <- dplyr::select(data, Participant = participant, Problem, Operation_answer, digit_answer, complex_recall_corr, complex_recall_rt = key_resp_8.rt, complex_proc_corr = key_resp_7.corr, complex_proc_rt = key_resp_7.rt, complex_prac_corr, key_resp_9.rt, key_resp_11.corr, key_resp_11.rt, key_resp.corr, key_resp.rt, processing_score, simple_recall_corr, simple_recall_rt = key_resp_5.rt, simple_recall, complex_recall, simple_recall_corrkeys, complex_answer = complex_recall_corrkeys)
data$simple_setsize <- nchar(as.character(data$simple_recall_corrkeys))
data$complex_setsize <- nchar(as.character(data$complex_answer))
data$simple_recall_corrkeys <- as.character(data$simple_recall_corrkeys)
data$simple_recall <- as.character(data$simple_recall)
data$complex_answer <- as.character(data$complex_answer)
data$complex_recall <- as.character(data$complex_recall)
data$Participant <- as.character(data$Participant)
data <- dplyr::mutate_if(data, is.character, stringr::str_to_upper)
data
}
.clean_SimpleSpan <- function(data){
Simple_Span <- dplyr::select(data, Participant, Stimulus = simple_recall_corrkeys, Response = simple_recall, Correct = simple_recall_corr, Set_Size = simple_setsize)
Simple_Span <- Simple_Span[!is.na(Simple_Span$Correct), ]
Simple_Span <- dplyr::mutate(Simple_Span,
Task = "Simple",
Trial = 1:nrow(Simple_Span)
)
Simple_Span
}
.clean_ComplexSpan <- function(data){
Complex_Span <- dplyr::select(data, Participant, Distractor = Problem, Operation_answer, digit_answer, Correct = complex_recall_corr, Response = complex_recall, Distractor_Correct = complex_proc_corr, Distractor_RT = complex_proc_rt, Stimulus = complex_answer, Set_Size = complex_setsize)
Complex_Span <- Complex_Span[(!is.na(Complex_Span$Distractor_RT) & Complex_Span$Distractor_RT != "")| (!is.na(Complex_Span$Response) & Complex_Span$Response != ""), ] # remove irrelevant NA rows
Complex_Span$Distractor_RT <- stringr::str_remove(Complex_Span$Distractor_RT, "\\]")
Complex_Span$Distractor_RT <- stringr::str_remove(Complex_Span$Distractor_RT, "\\[")
Complex_Span$Distractor_RT <- as.numeric(Complex_Span$Distractor_RT)
for(var in c("Stimulus", "Response", "Distractor_RT", "Distractor")){
Complex_Span[[var]] <- as.character(Complex_Span[[var]])
Complex_Span[[var]] <- ifelse(Complex_Span[[var]] == "", NA, Complex_Span[[var]])
}
Complex_Span$Set_Size <- ifelse(Complex_Span$Set_Size == 0, NA, Complex_Span$Set_Size)
Complex_Span <- tidyr::fill(Complex_Span, Correct, Response, Stimulus, Set_Size, .direction = c("up"))
Complex_Span <- Complex_Span[!is.na(Complex_Span$Distractor_RT),]
Complex_Span$Distractor_Correct = ifelse(Complex_Span$Operation_answer == Complex_Span$digit_answer, 1, 0)
Complex_Span$Distractor_RT <- as.numeric(Complex_Span$Distractor_RT)
Complex_Span$Task <- "Complex"
Complex_Span$Operation_answer <- NULL
Complex_Span$digit_answer <- NULL
N <- 1:length(unique(Complex_Span$Stimulus)) # append trial number
Duplicates <- as.data.frame(table(Complex_Span$Stimulus))
Complex_Span$Trial <- rep(N, sort(Duplicates$Freq))
Complex_Span
}
library(tidyverse)
library(ggplot2)
library(easystats)
devtools::install_github("easystats/easystats")
process_WM <- function(path){
data <- preprocess_WM(path)
# Split task type
Simple_Task <- dplyr::filter(data, Task == "Simple")
Complex_Task <- dplyr::filter(data, Task == "Complex")
# Adjusted Scores
Adjust_SS <- sum(Simple_Task$Correct[which(Simple_Task$Set_Size == max(Simple_Task$Set_Size))])/length(Simple_Task$Correct[which(Simple_Task$Set_Size == max(Simple_Task$Set_Size))])
Adjust_CS <- sum(Complex_Task$Correct[which(Complex_Task$Set_Size == max(Complex_Task$Set_Size))])/length(Complex_Task$Correct[which(Complex_Task$Set_Size == max(Complex_Task$Set_Size))])
### Table of Scores
# Span Scores per Participant
Between_Participant <- dplyr::mutate(data,
Simple_Span = max(Simple_Task$Set_Size) - 1,
Adjusted_SS = Simple_Span + Adjust_SS,
Complex_Span = max(Complex_Task$Set_Size) - 1,
Adjusted_CS = Complex_Span + Adjust_CS,
Mean_RT = mean(Distractor_RT, na.rm = TRUE))
Between_Participant <- dplyr::select(Between_Participant, Participant, Simple_Span, Adjusted_SS, Complex_Span, Adjusted_CS, Mean_RT)
Between_Participant <- unique(Between_Participant)
Between_Participant$Mean_RT <- round(Between_Participant$Mean_RT, 2)
# Change in proportion of Correct Recall, Correct Processing, and Mean RT as set size increases
Within_Participant <- dplyr::summarize(dplyr::group_by(data, Participant, Task, Set_Size),
Recall_Correct = sum(Correct, na.rm = TRUE)/length(Correct),
Mean_RT = mean(Distractor_RT, na.rm = TRUE),
Distractor_Correct = sum(Distractor_Correct, na.rm = TRUE)/length(Distractor_Correct))
Within_Participant$Distractor_Correct <- ifelse(Within_Participant$Mean_RT == "NaN", "NaN", Within_Participant$Distractor_Correct)
Within_Participant$Distractor_Correct <- round(as.numeric(Within_Participant$Distractor_Correct), 2)
Within_Participant$Mean_RT <- round(Within_Participant$Mean_RT, 2)
Within_Participant$Recall_Correct <- round(Within_Participant$Recall_Correct, 2)
# Mean RT and Proportion Correct per Distractor
Distractors <- dplyr::summarize(dplyr::group_by(Complex_Task, Distractor),
Mean_RT = mean(Distractor_RT, na.rm = TRUE),
Distractor_Correct = sum(Distractor_Correct, na.rm = TRUE)/length(Distractor_Correct))
Distractors$Mean_RT <- round(Distractors$Mean_RT, 2)
Distractors$Distractor_Correct <- round(Distractors$Distractor_Correct, 2)
return(list(Between_Participant, Within_Participant, Distractors))
}
library(easystats)
path <- "./data/pilot_3.csv"
preprocess_WM(pilot_3)
preprocess_WM(path)
pilot_3 <- preprocess_WM(path)
View(pilot_3)
pilot_3_2 <- process_WM(path)
View(pilot_3_2)
View(pilot_3_2)
pilot_3_2[[1]]
pilot_3_2[[2]]
getwd()
data <- data.frame()
for(participant in list.files("./data/")){
data <- rbind(data,
preprocess_WM(paste0("./data/", participant))
)
}
# Span scores across participants
data_subject <- data.frame()
for(participant in list.files("./data/")){
data_subject <- rbind(data_subject,
process_WM(paste0("./data/", participant))[[1]]
)
}
# Proportion of Correct Recall, Correct Processing, and Mean RT across Set Sizes for each participant
data_within <- data.frame()
for(participant in list.files("./data/")){
data_within <- dplyr::bind_rows(data_within,
process_WM(paste0("./data/", participant))[[2]]
)
}
data_within <- dplyr::arrange(data_within, Participant, desc(Task), Set_Size)
# Mean RT and Proportion Correct across Distractors
data_distractors <- data.frame()
for(participant in list.files("./data/")){
data_distractors <- dplyr::bind_rows(data_distractors,
process_WM(paste0("./data/", participant))[[3]]
)
}
Freq <- as.data.frame(table(data_distractors$Distractor))$Freq
data_distractors <- dplyr::summarize(dplyr::group_by(data_distractors, Distractor),
RT_Mean = mean(Mean_RT),
RT_Min = min(Mean_RT),
RT_Max = max(Mean_RT),
Correct_Mean = mean(Distractor_Correct),
Correct_Min = min(Distractor_Correct),
Correct_Max = max(Distractor_Correct))
data_distractors <- cbind(data_distractors, Freq)
data_distractors$Distractor[11] <- "(6/3) + 4"
data_distractors$Distractor[6] <- "(3x8) - 19"
colnames(data_distractors)[8] <- "Occurrences"
### Visualize data
# Max span for each participant
p1 <- ggplot(data = reshape2::melt(data_subject[ , -6], id.vars = "Participant"), aes(variable, value)) +
geom_point(aes(color = factor(Participant)), position=position_jitter(h=0.15, w=0.15), size = 5) +
scale_color_discrete(name = "Participant") +
scale_x_discrete(labels = c("Complex", "Complex (Adjusted)", "Simple", "Simple (Adjusted)")) +
theme(axis.title.x = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(x = "Span Type",
y =  "Span Size") +
theme_modern()
p1
# Correct Proportion Recall, Processing, and Mean RT across Set Size for each participant
p2 <- ggplot(data = data_within, aes(Set_Size, Recall_Correct)) +
geom_point(aes(color = factor(Participant)), position=position_jitter(h=0.15,w=0.15), size = 5) +
geom_smooth(aes(color = factor(Participant)), method="loess", se=F) +
scale_color_discrete(name = "Participant") +
labs(x = "Set Size",
y = "Proportion of Correct recall") +
facet_grid(~ Task) +
theme(strip.text.x = element_text(size=15)) +
theme_modern()
p2
p3 <- ggplot(data = data_within[which(data_within$Task == "Complex"), ], aes(Set_Size, Distractor_Correct)) +
geom_point(aes(color = factor(Participant)), position=position_jitter(h=0.15,w=0.15), size = 5) +
geom_smooth(aes(color = factor(Participant)), method="loess", se=F) +
scale_color_discrete(name = "Participant") +
labs(x = "Set Size",
y = "Proportion of Correct Processing Trials") +
theme_modern()
p3
p4 <- ggplot(data = data_within[which(data_within$Task == "Complex"), ], aes(Set_Size, Mean_RT)) +
geom_point(aes(color = factor(Participant)), position=position_jitter(h=0.15,w=0.15), size = 5) +
geom_smooth(aes(color = factor(Participant)), method="loess", se=F) +
scale_color_discrete(name = "Participant") +
labs(x = "Set Size",
y = "Mean RT of Processing Trials") +
theme_modern()
p4
# Mean RT and Correct Responses per Distractor
q1 <- ggplot(data = data_distractors, aes(x = Distractor, Mean_RT)) +
geom_pointrange(aes(y = RT_Mean, ymin = RT_Min, ymax = RT_Max), width=0.2, size=1, color="purple", fill="blue", shape=22) +
ylab("Mean Reaction Time") +
coord_flip() +
theme_modern(axis.text.size = 7) +
theme(axis.title.y = element_blank()) +
scale_color_material() +
scale_fill_material() +
theme(axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.x = element_text(size = 15)) +
theme_modern()
q1
q2 <- ggplot(data = data_distractors, aes(x = Distractor, Correct_Mean)) +
geom_pointrange(aes(y = Correct_Mean, ymin = Correct_Min, ymax = Correct_Max), width=0.2, size=1, color="orange", fill="red", shape=22) +
ylab("Proportion of Correct Responses") +
coord_flip() +
theme_modern(axis.text.size = 7) +
scale_color_material() +
scale_fill_material() +
theme(axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.x = element_text(size = 15)) +
theme_modern()
q2
q3 <- ggplot(data = data_distractors, aes(x = Correct_Mean, RT_Mean)) +
geom_point(size = 5) +
geom_smooth(method="lm", se=F) +
labs(x = "Proportion of Correct Responses",
y = "Mean Reaction Time") +
theme(axis.text.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.x = element_text(size = 15)) +
theme_modern()
q3
# Save Plots
ggsave("figures/Participant_SpanSize.png", p1, width = 10, height = 8, dpi = 150)
ggsave("figures/SetSize_RecallCorr.png", p2, width = 10, height = 8, dpi = 150)
ggsave("figures/SetSize_ProcessingCorr.png", p3, width = 10, height = 8, dpi = 150)
ggsave("figures/SetSize_ProcessingRT.png", p4, width = 10, height = 8, dpi = 150)
ggsave("figures/Distractor_RT.png", q1, width = 12, height = 8, dpi = 150)
ggsave("figures/Distractor_Correct.png", q2, width = 12, height = 8, dpi = 150)
ggsave("figures/Distractor_RTvsCorrect.png", q3, width = 12, height = 8, dpi = 150)
